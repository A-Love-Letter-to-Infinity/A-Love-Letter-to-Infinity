using System.Runtime.CompilerServices;
using Content.Shared.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.DeltaV.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class MailMetricUiFragment : BoxContainer
{

    private OpenedMailPercentGrade? _successGrade;

    public MailMetricUiFragment()
    {
        RobustXamlLoader.Load(this);

        // This my way of adding multiple classes to a XAML control.
        // Haha Batman I'm going to blow up Gotham City
        OpenedMailCount.StyleClasses.Add("Good");
        OpenedMailSpesos.StyleClasses.Add("Good");
        TamperedMailCount.StyleClasses.Add("Danger");
        TamperedMailSpesos.StyleClasses.Add("Danger");
        ExpiredMailCount.StyleClasses.Add("Danger");
        ExpiredMailSpesos.StyleClasses.Add("Danger");
        DamagedMailCount.StyleClasses.Add("Danger");
        DamagedMailSpesos.StyleClasses.Add("Danger");
        UnopenedMailCount.StyleClasses.Add("Caution");
    }

    public void UpdateState(MailMetricUiState state)
    {
        UpdateTextLabels(state);
        UpdateSuccessGrade(state);
    }

    public void UpdateTextLabels(MailMetricUiState state)
    {
        OpenedMailCount.Text = state.OpenedMailCount.ToString();
        OpenedMailSpesos.Text = state.MailEarnings.ToString();
        TamperedMailCount.Text = state.TamperedMailCount.ToString();
        TamperedMailSpesos.Text = state.TamperedMailLosses.ToString();
        ExpiredMailCount.Text = state.ExpiredMailCount.ToString();
        ExpiredMailSpesos.Text = state.ExpiredMailLosses.ToString();
        DamagedMailCount.Text = state.DamagedMailCount.ToString();
        DamagedMailSpesos.Text = state.DamagedMailLosses.ToString();
        UnopenedMailCount.Text = state.UnopenedMailCount.ToString();
        TotalMailCount.Text = state.TotalMail.ToString();
        TotalMailSpesos.Text = state.TotalIncome.ToString();
        SuccessRateCounts.Text = Loc.GetString("mail-metrics-progress",
            ("opened", state.OpenedMailCount),
            ("total", state.TotalMail));
        SuccessRatePercent.Text = Loc.GetString("mail-metrics-progress-percent",
            ("successRate", state.SuccessRate));
    }

    public void UpdateSuccessGrade(MailMetricUiState state)
    {
        var previousGrade = _successGrade;
        _successGrade = GetSuccessRateGrade(state.SuccessRate);

        // No need to update if they're the same
        if (previousGrade == _successGrade)
            return;

        var previousGradeClass = GetClassForGrade(previousGrade);
        if (previousGradeClass != string.Empty)
        {
            SuccessRatePercent.StyleClasses.Remove(previousGradeClass);
        }

        SuccessRatePercent.StyleClasses.Add(GetClassForGrade(_successGrade));
    }

    private static OpenedMailPercentGrade GetSuccessRateGrade(double successRate)
    {
        if (successRate > 75)
            return OpenedMailPercentGrade.Good;
        else if (successRate > 50)
            return OpenedMailPercentGrade.Average;
        else
            return OpenedMailPercentGrade.Bad;
    }

    private string GetClassForGrade(OpenedMailPercentGrade? grade)
    {
        switch (grade)
        {
            case OpenedMailPercentGrade.Good:
                return "Good";
            case OpenedMailPercentGrade.Average:
                return "Caution";
            case OpenedMailPercentGrade.Bad:
                return "Danger";
            default:
                return string.Empty;
        }
    }
}

enum OpenedMailPercentGrade
{
    Good,
    Average,
    Bad
}
