using Content.Client.UserInterface.Controls;
using Content.Shared.InfinityStation.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.InfinityStation.RoundEnd
{
    [GenerateTypedNameReferences]
    public sealed partial class NoEorgPopup : FancyWindow
    {
        [Dependency] private readonly IConfigurationManager _cfg = default!;

        private bool GetSkipPopupCvar() => _cfg.GetCVar(ICCVars.SkipRoundEndNoEorgMessage);

        private float _timer = 5f;

        public NoEorgPopup()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            TitleLabel.Text = Loc.GetString("no-eorg-popup-label");
            MessageLabel.SetMessage(FormattedMessage.FromMarkupOrThrow(Loc.GetString("no-eorg-popup-message")));
            RuleLabel.SetMessage(FormattedMessage.FromMarkupOrThrow(Loc.GetString("no-eorg-popup-rule")));
            RuleTextLabel.SetMessage(FormattedMessage.FromMarkupOrThrow(Loc.GetString("no-eorg-popup-rule-text")));


            SkipCheckBox.Pressed = GetSkipPopupCvar();
            SkipCheckBox.OnToggled += OnSkipToggled;

            NoEorgCloseButton.OnPressed += OnClosePressed;
            NoEorgCloseButton.Disabled = true;
            UpdateCloseButton();
        }

        private void OnSkipToggled(BaseButton.ButtonEventArgs args)
        {
            _cfg.SetCVar(ICCVars.SkipRoundEndNoEorgMessage, SkipCheckBox.Pressed);
            _cfg.SaveToFile();
        }

        private void OnClosePressed(BaseButton.ButtonEventArgs args)
        {
            Close();
        }

        private void UpdateCloseButton()
        {
            NoEorgCloseButton.Text = _timer > 0f
                ? Loc.GetString("no-eorg-popup-close-button-wait", ("time", (int)MathF.Ceiling(_timer)))
                : Loc.GetString("no-eorg-popup-close-button");
            NoEorgCloseButton.Disabled = _timer > 0f;
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            if (!NoEorgCloseButton.Disabled)
                return;

            if (_timer > 0.0f)
            {
                _timer -= args.DeltaSeconds;
                if (_timer < 0)
                    _timer = 0;
            }

            UpdateCloseButton();
        }
    }
}
